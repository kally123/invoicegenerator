// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mc.invoice.repository;

import com.mc.invoice.domain.Accomidation;
import com.mc.invoice.domain.CustomerBooking;
import com.mc.invoice.domain.QAccomidation;
import com.mc.invoice.repository.AccomidationRepositoryCustom;
import com.mc.invoice.repository.AccomidationRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect AccomidationRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: AccomidationRepositoryImpl implements AccomidationRepositoryCustom;
    
    declare @type: AccomidationRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccomidationRepositoryImpl.ACCOMIDATION_TYPE = "accomidationType";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccomidationRepositoryImpl.PRICE = "price";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccomidationRepositoryImpl.CUSTOMER_BOOKING = "customerBooking";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Accomidation> AccomidationRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAccomidation accomidation = QAccomidation.accomidation;
        
        JPQLQuery<Accomidation> query = from(accomidation);
        
        Path<?>[] paths = new Path<?>[] {accomidation.accomidationType,accomidation.price,accomidation.customerBooking};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ACCOMIDATION_TYPE, accomidation.accomidationType)
			.map(PRICE, accomidation.price)
			.map(CUSTOMER_BOOKING, accomidation.customerBooking);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, accomidation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerBooking
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Accomidation> AccomidationRepositoryImpl.findByCustomerBooking(CustomerBooking customerBooking, GlobalSearch globalSearch, Pageable pageable) {
        
        QAccomidation accomidation = QAccomidation.accomidation;
        
        JPQLQuery<Accomidation> query = from(accomidation);
        
        Assert.notNull(customerBooking, "customerBooking is required");
        
        query.where(accomidation.customerBooking.eq(customerBooking));
        Path<?>[] paths = new Path<?>[] {accomidation.accomidationType,accomidation.price,accomidation.customerBooking};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ACCOMIDATION_TYPE, accomidation.accomidationType)
			.map(PRICE, accomidation.price)
			.map(CUSTOMER_BOOKING, accomidation.customerBooking);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, accomidation);
    }
    
}
