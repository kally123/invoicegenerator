// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mc.invoice.service.impl;

import com.mc.invoice.domain.CustomerBooking;
import com.mc.invoice.repository.CustomerBookingRepository;
import com.mc.invoice.service.impl.CustomerBookingServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerBookingServiceImpl_Roo_Service_Impl {
    
    declare @type: CustomerBookingServiceImpl: @Service;
    
    declare @type: CustomerBookingServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerBookingRepository CustomerBookingServiceImpl.customerBookingRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param customerBookingRepository
     */
    @Autowired
    public CustomerBookingServiceImpl.new(CustomerBookingRepository customerBookingRepository) {
        setCustomerBookingRepository(customerBookingRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerBookingRepository
     */
    public CustomerBookingRepository CustomerBookingServiceImpl.getCustomerBookingRepository() {
        return customerBookingRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerBookingRepository
     */
    public void CustomerBookingServiceImpl.setCustomerBookingRepository(CustomerBookingRepository customerBookingRepository) {
        this.customerBookingRepository = customerBookingRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerBooking
     */
    @Transactional
    public void CustomerBookingServiceImpl.delete(CustomerBooking customerBooking) {
        // Clear bidirectional one-to-one parent relationship with Accomidation
        customerBooking.removeFromAccomidation();
        
        // Clear bidirectional one-to-one parent relationship with Customer
        customerBooking.removeFromCustomer();
        
        getCustomerBookingRepository().delete(customerBooking);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<CustomerBooking> CustomerBookingServiceImpl.save(Iterable<CustomerBooking> entities) {
        return getCustomerBookingRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void CustomerBookingServiceImpl.delete(Iterable<Long> ids) {
        List<CustomerBooking> toDelete = getCustomerBookingRepository().findAll(ids);
        getCustomerBookingRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return CustomerBooking
     */
    @Transactional
    public CustomerBooking CustomerBookingServiceImpl.save(CustomerBooking entity) {
        
        // Ensure the relationships are maintained
        entity.addToAccomidation(entity.getAccomidation());
        
        entity.addToCustomer(entity.getCustomer());
        
        return getCustomerBookingRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return CustomerBooking
     */
    public CustomerBooking CustomerBookingServiceImpl.findOne(Long id) {
        return getCustomerBookingRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return CustomerBooking
     */
    public CustomerBooking CustomerBookingServiceImpl.findOneForUpdate(Long id) {
        return getCustomerBookingRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<CustomerBooking> CustomerBookingServiceImpl.findAll(Iterable<Long> ids) {
        return getCustomerBookingRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<CustomerBooking> CustomerBookingServiceImpl.findAll() {
        return getCustomerBookingRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long CustomerBookingServiceImpl.count() {
        return getCustomerBookingRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<CustomerBooking> CustomerBookingServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerBookingRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<CustomerBooking> CustomerBookingServiceImpl.getEntityType() {
        return CustomerBooking.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> CustomerBookingServiceImpl.getIdType() {
        return Long.class;
    }
    
}
